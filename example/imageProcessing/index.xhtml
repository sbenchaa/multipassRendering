<html xmlns='http://www.w3.org/1999/xhtml'>
 <head>
  <meta http-equiv="X-UA-Compatible" content="chrome=1" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <title>Ping-Pong method for X3OM</title>
  <link rel="stylesheet" type="text/css" href="../../lib/x3dom/x3dom.css" />
  <link rel="stylesheet" type="text/css" href="../../lib/hud/hud.css" />
  <script type="text/javascript" src="../../lib/hud/hud.js"></script>
  <script type="text/javascript" src="../../lib/x3dom/x3dom.js"></script>
 </head>       
 <body>

  <h1>Multi-passing image processing using X3DOM (live editing)</h1>
  <h5>If you want use this template, assumes the float array into uniform was supported (not yet supported in current version of X3DOM).</h5>
  <X3D id="test" xmlns="http://www.x3dom.org/x3dom" showStat="false" showLog="false" x="0px" y="0px" width="512px" height="512px" altImg="helloX3D-alt.png">
   <Scene>
    <!-- *********************************** START RBO PANG ************************************************ -->
    <Shape id="pang">
     <Appearance>
      <ComposedShader id="fullScreenSpaceProjection">
       <ShaderPart type="VERTEX">
        <![CDATA[
        attribute vec3 position;
        attribute vec2 texcoord;
        varying vec2 fragTexCoord;

        void main(){
        vec2 pos=position.xy;
        fragTexCoord = texcoord;
        fragTexCoord.y = -fragTexCoord.y;
        gl_Position = vec4(pos,0.0,1.0);
        }
        ]]></ShaderPart>
       <ShaderPart type="FRAGMENT">
        <![CDATA[
        #ifdef GL_ES
        precision mediump float;
        #endif

        uniform sampler2D tex;
        varying vec2 fragTexCoord;

        void main(){
        vec4 color=texture2D( tex , fragTexCoord);
        gl_FragColor = color;

        }
        ]]></ShaderPart>
      </ComposedShader>
      <!-- *********************************** START FBO PONG ************************************************ -->
      <RenderedTexture id="pong" update="ALWAYS" dimensions="512 512 4" >
       <Group>
        <Shape>
         <Appearance>
          <ComposedShader>
           <ShaderPart type="VERTEX">
            <![CDATA[
            attribute vec3 position;
            attribute vec2 texcoord;
            varying vec2 fragTexCoord;

            void main(){
            vec2 pos=position.xy;
            fragTexCoord = texcoord;

            gl_Position = vec4(pos,0.0,1.0);
            }
            ]]></ShaderPart>
           <ShaderPart type="FRAGMENT">
            <![CDATA[
            #ifdef GL_ES
            precision mediump float;
            #endif

            uniform sampler2D tex;
            varying vec2 fragTexCoord;

            void main(){
            vec4 color=texture2D( tex , fragTexCoord);
            gl_FragColor = color;

            }
            ]]></ShaderPart>
          </ComposedShader>
          <!-- *********************************** START FBO PING ************************************************ -->
          <RenderedTexture id="ping"  update="ALWAYS" dimensions="512 512 4">
           <Group>
            <Shape>
             <Appearance>
              <ComposedShader>
               <field id="uFrame" type="SFFloat" name="uFrame"/>
               <field id="uRenderPass" type="SFFloat" name="uRenderPass"/>
               <field id="fboB"  type="SFInt32" name="fboB" value="0"/>
               <field id="uKernel" type="MFFloat" name="uKernel"/>
               <field id="uPixelSize" type="SFFloat" name="uPixelSize"/>
               <ShaderPart type="VERTEX">
                <![CDATA[
                #define KERNEL_SIZE 9
                attribute vec3 position;
                attribute vec2 texcoord;
                uniform float uPixelSize;
                varying vec2 fragTexCoord;
                varying vec2 offset[KERNEL_SIZE];

                void main(){

                offset[0]=vec2(-uPixelSize,-uPixelSize);
                offset[1]=vec2(        0.0,-uPixelSize);
                offset[2]=vec2( uPixelSize,-uPixelSize);
                offset[3]=vec2(-uPixelSize,        0.0);
                offset[4]=vec2(        0.0,        0.0);
                offset[5]=vec2( uPixelSize,        0.0);
                offset[6]=vec2(-uPixelSize, uPixelSize);
                offset[7]=vec2(        0.0, uPixelSize);
                offset[8]=vec2( uPixelSize, uPixelSize);

                vec2 pos=position.xy;
                fragTexCoord = texcoord;
                gl_Position = vec4(pos,0.0,1.0);
                }
                ]]></ShaderPart>
               <ShaderPart type="FRAGMENT">
                <![CDATA[
                #ifdef GL_ES
                precision mediump float;
                #endif

                #define KERNEL_SIZE 9
                #define OFFSET_SIZE 3

                uniform float uFrame;
                uniform float uRenderPass;
                uniform float uKernel[KERNEL_SIZE];
                uniform sampler2D fboB;
                uniform sampler2D srcA;
                varying vec2 offset[KERNEL_SIZE];
                varying vec2 fragTexCoord;

                vec4 process(){
                vec4 sum=vec4(0.0);
                sum +=(texture2D( fboB , fragTexCoord+offset[0] )*uKernel[0]);
                sum +=(texture2D( fboB , fragTexCoord+offset[1] )*uKernel[1]);
                sum +=(texture2D( fboB , fragTexCoord+offset[2] )*uKernel[2]);
                sum +=(texture2D( fboB , fragTexCoord+offset[3] )*uKernel[3]);
                sum +=(texture2D( fboB , fragTexCoord+offset[4] )*uKernel[4]);
                sum +=(texture2D( fboB , fragTexCoord+offset[5] )*uKernel[5]);
                sum +=(texture2D( fboB , fragTexCoord+offset[6] )*uKernel[6]);
                sum +=(texture2D( fboB , fragTexCoord+offset[7] )*uKernel[7]);
                sum +=(texture2D( fboB , fragTexCoord+offset[8] )*uKernel[8]);
                return sum;
                }

                void main(){
                vec4 color=vec4(0.0);

                if(uFrame>uRenderPass)
                color=texture2D(fboB , fragTexCoord);
                else
                color=process();

                color-=color/2.0;

                color.a=1.0;
                gl_FragColor =  color;

                }
                ]]></ShaderPart>
              </ComposedShader>
              <MultiTexture>
               <Texture url="../../media/image.png"/>
               <Texture USE="pong"/>
              </MultiTexture>
             </Appearance>
             <Plane/>
            </Shape>
           </Group>
          </RenderedTexture>  
          <!-- *********************************** END FBO PING ************************************************ -->
         </Appearance>
         <Plane/>
        </Shape>
       </Group>
      </RenderedTexture>
      <!-- *********************************** END FBO PONG ************************************************ -->
     </Appearance>
     <Plane/>
    </Shape>
    <!-- *********************************** END RBO PANG ************************************************ -->
    <TimeSensor DEF='TIMER' cycleInterval='30' loop='false'/>
   </Scene>
  </X3D>  
  <br/>
  <script type="text/javascript" src="init.js"></script>
  <span id="author">Copyright Sofiane Benchaa, 2012.</span>
 </body>
</html>
